/* tslint:disable */
/* eslint-disable */
/**
 * Crypto Map API documentation
 * The Establishments map API is serves a list of establishments that accept crypto as a payment method.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AutocompleteApi,
  CategoriesIssueInner,
  CategoryInner,
  CryptoEstablishment,
  CryptoEstablishmentBaseInner,
  CurrencyInner,
  EstablishmentCandidateBody,
  EstablishmentCandidateResponse,
  EstablishmentIssueBody,
  EstablishmentIssueResponse,
  GetProviders200ResponseInner,
} from '../models';
import {
    AutocompleteApiFromJSON,
    AutocompleteApiToJSON,
    CategoriesIssueInnerFromJSON,
    CategoriesIssueInnerToJSON,
    CategoryInnerFromJSON,
    CategoryInnerToJSON,
    CryptoEstablishmentFromJSON,
    CryptoEstablishmentToJSON,
    CryptoEstablishmentBaseInnerFromJSON,
    CryptoEstablishmentBaseInnerToJSON,
    CurrencyInnerFromJSON,
    CurrencyInnerToJSON,
    EstablishmentCandidateBodyFromJSON,
    EstablishmentCandidateBodyToJSON,
    EstablishmentCandidateResponseFromJSON,
    EstablishmentCandidateResponseToJSON,
    EstablishmentIssueBodyFromJSON,
    EstablishmentIssueBodyToJSON,
    EstablishmentIssueResponseFromJSON,
    EstablishmentIssueResponseToJSON,
    GetProviders200ResponseInnerFromJSON,
    GetProviders200ResponseInnerToJSON,
} from '../models';

export interface AutocompleteRequest {
    query: string;
}

export interface GetEstablishmentByUuidRequest {
    uuid: string;
}

export interface PostCandidateRequest {
    establishmentCandidateBody?: EstablishmentCandidateBody;
}

export interface PostEstablishmentIssueRequest {
    establishmentIssueBody?: EstablishmentIssueBody;
}

export interface SearchEstablishmentsRequest {
    filterCurrency?: Array<string>;
    filterEstablishmentCategoryLabel?: Array<string>;
    filterBoundingBox?: string;
}

/**
 * 
 */
export class EstablishmentsApi extends runtime.BaseAPI {

    /**
     * Autocompletes for establishments, categories and currencies
     */
    async autocompleteRaw(requestParameters: AutocompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AutocompleteApi>> {
        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling autocomplete.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AutocompleteApiFromJSON(jsonValue));
    }

    /**
     * Autocompletes for establishments, categories and currencies
     */
    async autocomplete(requestParameters: AutocompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AutocompleteApi> {
        const response = await this.autocompleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Nimiq Categories
     */
    async getCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CategoryInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/establishments/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryInnerFromJSON));
    }

    /**
     * Nimiq Categories
     */
    async getCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CategoryInner>> {
        const response = await this.getCategoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     * CryptoCurrencies
     */
    async getCurrenciesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CurrencyInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/currencies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CurrencyInnerFromJSON));
    }

    /**
     * CryptoCurrencies
     */
    async getCurrencies(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CurrencyInner>> {
        const response = await this.getCurrenciesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get establishment by uuid
     */
    async getEstablishmentByUuidRaw(requestParameters: GetEstablishmentByUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CryptoEstablishment>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getEstablishmentByUuid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/establishments/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CryptoEstablishmentFromJSON(jsonValue));
    }

    /**
     * Get establishment by uuid
     */
    async getEstablishmentByUuid(requestParameters: GetEstablishmentByUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CryptoEstablishment> {
        const response = await this.getEstablishmentByUuidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get issue categories with its label
     */
    async getIssueCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CategoriesIssueInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/establishments/issues/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoriesIssueInnerFromJSON));
    }

    /**
     * Get issue categories with its label
     */
    async getIssueCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CategoriesIssueInner>> {
        const response = await this.getIssueCategoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all providers
     */
    async getProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetProviders200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetProviders200ResponseInnerFromJSON));
    }

    /**
     * Get all providers
     */
    async getProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetProviders200ResponseInner>> {
        const response = await this.getProvidersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new candidate for a establishment
     */
    async postCandidateRaw(requestParameters: PostCandidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EstablishmentCandidateResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/establishments/candidates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EstablishmentCandidateBodyToJSON(requestParameters.establishmentCandidateBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EstablishmentCandidateResponseFromJSON(jsonValue));
    }

    /**
     * Create a new candidate for a establishment
     */
    async postCandidate(requestParameters: PostCandidateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EstablishmentCandidateResponse> {
        const response = await this.postCandidateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new issue for a establishment
     */
    async postEstablishmentIssueRaw(requestParameters: PostEstablishmentIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EstablishmentIssueResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/establishments/issues`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EstablishmentIssueBodyToJSON(requestParameters.establishmentIssueBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EstablishmentIssueResponseFromJSON(jsonValue));
    }

    /**
     * Create a new issue for a establishment
     */
    async postEstablishmentIssue(requestParameters: PostEstablishmentIssueRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EstablishmentIssueResponse> {
        const response = await this.postEstablishmentIssueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for establishments
     */
    async searchEstablishmentsRaw(requestParameters: SearchEstablishmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CryptoEstablishmentBaseInner>>> {
        const queryParameters: any = {};

        if (requestParameters.filterCurrency) {
            queryParameters['filter[currency]'] = requestParameters.filterCurrency;
        }

        if (requestParameters.filterEstablishmentCategoryLabel) {
            queryParameters['filter[establishmentCategory.label]'] = requestParameters.filterEstablishmentCategoryLabel;
        }

        if (requestParameters.filterBoundingBox !== undefined) {
            queryParameters['filter[bounding_box]'] = requestParameters.filterBoundingBox;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/establishments/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CryptoEstablishmentBaseInnerFromJSON));
    }

    /**
     * Search for establishments
     */
    async searchEstablishments(requestParameters: SearchEstablishmentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CryptoEstablishmentBaseInner>> {
        const response = await this.searchEstablishmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
