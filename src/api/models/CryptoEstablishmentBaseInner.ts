/* tslint:disable */
/* eslint-disable */
/**
 * Crypto Map API documentation
 * The Establishments map API is serves a list of establishments that accept crypto as a payment method.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GeoLocation } from './GeoLocation';
import {
    GeoLocationFromJSON,
    GeoLocationFromJSONTyped,
    GeoLocationToJSON,
} from './GeoLocation';

/**
 * This is the basic information of an establishment that we show only in the map. If more information is required, you can use the /api/establishments/{establishmentId} endpoint.
 * @export
 * @interface CryptoEstablishmentBaseInner
 */
export interface CryptoEstablishmentBaseInner {
    /**
     * 
     * @type {string}
     * @memberof CryptoEstablishmentBaseInner
     */
    uuid: string;
    /**
     * 
     * @type {string}
     * @memberof CryptoEstablishmentBaseInner
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CryptoEstablishmentBaseInner
     */
    category: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof CryptoEstablishmentBaseInner
     */
    providersId: Array<number>;
    /**
     * 
     * @type {GeoLocation}
     * @memberof CryptoEstablishmentBaseInner
     */
    geoLocation: GeoLocation;
}

/**
 * Check if a given object implements the CryptoEstablishmentBaseInner interface.
 */
export function instanceOfCryptoEstablishmentBaseInner(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "category" in value;
    isInstance = isInstance && "providersId" in value;
    isInstance = isInstance && "geoLocation" in value;

    return isInstance;
}

export function CryptoEstablishmentBaseInnerFromJSON(json: any): CryptoEstablishmentBaseInner {
    return CryptoEstablishmentBaseInnerFromJSONTyped(json, false);
}

export function CryptoEstablishmentBaseInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): CryptoEstablishmentBaseInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': json['uuid'],
        'name': json['name'],
        'category': json['category'],
        'providersId': json['providers_id'],
        'geoLocation': GeoLocationFromJSON(json['geo_location']),
    };
}

export function CryptoEstablishmentBaseInnerToJSON(value?: CryptoEstablishmentBaseInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'name': value.name,
        'category': value.category,
        'providers_id': value.providersId,
        'geo_location': GeoLocationToJSON(value.geoLocation),
    };
}

