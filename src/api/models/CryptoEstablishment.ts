/* tslint:disable */
/* eslint-disable */
/**
 * Crypto Map API documentation
 * The Establishments map API is serves a list of establishments that accept crypto as a payment method.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CryptoEstablishmentProvidersInner } from './CryptoEstablishmentProvidersInner';
import {
    CryptoEstablishmentProvidersInnerFromJSON,
    CryptoEstablishmentProvidersInnerFromJSONTyped,
    CryptoEstablishmentProvidersInnerToJSON,
} from './CryptoEstablishmentProvidersInner';
import type { GeoLocation } from './GeoLocation';
import {
    GeoLocationFromJSON,
    GeoLocationFromJSONTyped,
    GeoLocationToJSON,
} from './GeoLocation';

/**
 * 
 * @export
 * @interface CryptoEstablishment
 */
export interface CryptoEstablishment {
    /**
     * 
     * @type {string}
     * @memberof CryptoEstablishment
     */
    uuid: string;
    /**
     * 
     * @type {string}
     * @memberof CryptoEstablishment
     */
    gmapsPlaceId: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CryptoEstablishment
     */
    gmapsTypes: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CryptoEstablishment
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CryptoEstablishment
     */
    category: string;
    /**
     * 
     * @type {string}
     * @memberof CryptoEstablishment
     */
    photoReference?: string;
    /**
     * 
     * @type {string}
     * @memberof CryptoEstablishment
     */
    address: string;
    /**
     * 
     * @type {number}
     * @memberof CryptoEstablishment
     */
    rating: number;
    /**
     * 
     * @type {GeoLocation}
     * @memberof CryptoEstablishment
     */
    geoLocation: GeoLocation;
    /**
     * 
     * @type {Array<CryptoEstablishmentProvidersInner>}
     * @memberof CryptoEstablishment
     */
    providers: Array<CryptoEstablishmentProvidersInner>;
}

/**
 * Check if a given object implements the CryptoEstablishment interface.
 */
export function instanceOfCryptoEstablishment(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "gmapsPlaceId" in value;
    isInstance = isInstance && "gmapsTypes" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "category" in value;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "rating" in value;
    isInstance = isInstance && "geoLocation" in value;
    isInstance = isInstance && "providers" in value;

    return isInstance;
}

export function CryptoEstablishmentFromJSON(json: any): CryptoEstablishment {
    return CryptoEstablishmentFromJSONTyped(json, false);
}

export function CryptoEstablishmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): CryptoEstablishment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': json['uuid'],
        'gmapsPlaceId': json['gmaps_place_id'],
        'gmapsTypes': json['gmaps_types'],
        'name': json['name'],
        'category': json['category'],
        'photoReference': !exists(json, 'photo_reference') ? undefined : json['photo_reference'],
        'address': json['address'],
        'rating': json['rating'],
        'geoLocation': GeoLocationFromJSON(json['geo_location']),
        'providers': ((json['providers'] as Array<any>).map(CryptoEstablishmentProvidersInnerFromJSON)),
    };
}

export function CryptoEstablishmentToJSON(value?: CryptoEstablishment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'gmaps_place_id': value.gmapsPlaceId,
        'gmaps_types': value.gmapsTypes,
        'name': value.name,
        'category': value.category,
        'photo_reference': value.photoReference,
        'address': value.address,
        'rating': value.rating,
        'geo_location': GeoLocationToJSON(value.geoLocation),
        'providers': ((value.providers as Array<any>).map(CryptoEstablishmentProvidersInnerToJSON)),
    };
}

